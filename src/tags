!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.6	//
ALU	PE.h	/^	FMA ALU;$/;"	m	class:PE
ALU_Add	Parameters.h	/^enum ALU_op {ALU_Add,ALU_Mul, ALU_MAD, ALU_MAC};$/;"	e	enum:ALU_op
ALU_MAC	Parameters.h	/^enum ALU_op {ALU_Add,ALU_Mul, ALU_MAD, ALU_MAC};$/;"	e	enum:ALU_op
ALU_MAD	Parameters.h	/^enum ALU_op {ALU_Add,ALU_Mul, ALU_MAD, ALU_MAC};$/;"	e	enum:ALU_op
ALU_Mul	Parameters.h	/^enum ALU_op {ALU_Add,ALU_Mul, ALU_MAD, ALU_MAC};$/;"	e	enum:ALU_op
ALU_op	Parameters.h	/^enum ALU_op {ALU_Add,ALU_Mul, ALU_MAD, ALU_MAC};$/;"	g
Accelerator	Simulator.cpp	/^LAPU * Accelerator;$/;"	v
Accumulator_Curr	FMA.h	/^	double Accumulator_Curr;$/;"	m	class:FMA
Accumulator_Next	FMA.h	/^	double Accumulator_Next;$/;"	m	class:FMA
Add_Latency	FMA.h	/^	int Add_Latency;$/;"	m	class:FMA
Add_Pipe_Regs_Curr	FMA.h	/^	double * Add_Pipe_Regs_Curr;$/;"	m	class:FMA
Add_Pipe_Regs_Next	FMA.h	/^	double * Add_Pipe_Regs_Next;$/;"	m	class:FMA
Addition_Latency	Parameters.h	28;"	d
Address_A	PE.h	/^	int Address_A;$/;"	m	class:PE
Address_B	PE.h	/^	int Address_B;$/;"	m	class:PE
Address_Reg_A_Curr	PE.h	/^	int Address_Reg_A_Curr;$/;"	m	class:PE
Address_Reg_A_Next	PE.h	/^	int Address_Reg_A_Next;$/;"	m	class:PE
Address_Reg_B_Curr	PE.h	/^	int Address_Reg_B_Curr;$/;"	m	class:PE
Address_Reg_B_Next	PE.h	/^	int Address_Reg_B_Next;$/;"	m	class:PE
Address_Reg_WB_Curr	PE.h	/^	int Address_Reg_WB_Curr;$/;"	m	class:PE
Address_Reg_WB_Next	PE.h	/^	int Address_Reg_WB_Next;$/;"	m	class:PE
Address_WA	PE.h	/^	int Address_WA;$/;"	m	class:PE
Address_WB	PE.h	/^	int Address_WB;$/;"	m	class:PE
Assign_input_Matrix	IO.cpp	/^int IO::Assign_input_Matrix( double **& matrix_A, double **& matrix_B, double **& matrix_C){$/;"	f	class:IO
Assign_input_Matrix	LAPU.cpp	/^int LAPU::Assign_input_Matrix( double **& matrix_A, double **& matrix_B, double **& matrix_C){$/;"	f	class:LAPU
Bin_Counter	IO.h	/^	int Bin_Counter;$/;"	m	class:IO
Bin_Counter	PE.h	/^	int Bin_Counter;$/;"	m	class:PE
Buffer_A	IO.h	/^	double    Buffer_A[LAPU_Size][LAPU_Size];$/;"	m	class:IO
Buffer_B	IO.h	/^	double    Buffer_B[LAPU_Size][LAPU_Size];$/;"	m	class:IO
Buffer_Cin	IO.h	/^	double    Buffer_Cin[LAPU_Size][LAPU_Size];$/;"	m	class:IO
Buffer_Cout	IO.h	/^	double    Buffer_Cout[LAPU_Size][LAPU_Size];$/;"	m	class:IO
Bus_Dynamic	Parameters.h	51;"	d
Chol_BC_InvSqrt	LAPU.h	/^	enum Chol_States {Chol_Initial, Chol_Feed_Sqrt, Chol_Inv_Sqrt, Chol_BC_InvSqrt,$/;"	e	enum:LAPU::Chol_States
Chol_BC_Mul	LAPU.h	/^					  Chol_Multiply, Chol_BC_Mul, Chol_Rank1_Update, Chol_End} Chol_Current_State,Chol_Next_State;$/;"	e	enum:LAPU::Chol_States
Chol_Current_State	LAPU.h	/^					  Chol_Multiply, Chol_BC_Mul, Chol_Rank1_Update, Chol_End} Chol_Current_State,Chol_Next_State;$/;"	m	class:LAPU	typeref:enum:LAPU::Chol_States
Chol_End	LAPU.h	/^					  Chol_Multiply, Chol_BC_Mul, Chol_Rank1_Update, Chol_End} Chol_Current_State,Chol_Next_State;$/;"	e	enum:LAPU::Chol_States
Chol_Feed_Sqrt	LAPU.h	/^	enum Chol_States {Chol_Initial, Chol_Feed_Sqrt, Chol_Inv_Sqrt, Chol_BC_InvSqrt,$/;"	e	enum:LAPU::Chol_States
Chol_Initial	LAPU.h	/^	enum Chol_States {Chol_Initial, Chol_Feed_Sqrt, Chol_Inv_Sqrt, Chol_BC_InvSqrt,$/;"	e	enum:LAPU::Chol_States
Chol_Inv_Sqrt	LAPU.h	/^	enum Chol_States {Chol_Initial, Chol_Feed_Sqrt, Chol_Inv_Sqrt, Chol_BC_InvSqrt,$/;"	e	enum:LAPU::Chol_States
Chol_Multiply	LAPU.h	/^					  Chol_Multiply, Chol_BC_Mul, Chol_Rank1_Update, Chol_End} Chol_Current_State,Chol_Next_State;$/;"	e	enum:LAPU::Chol_States
Chol_Next_State	LAPU.h	/^					  Chol_Multiply, Chol_BC_Mul, Chol_Rank1_Update, Chol_End} Chol_Current_State,Chol_Next_State;$/;"	m	class:LAPU	typeref:enum:LAPU::Chol_States
Chol_Rank1_Update	LAPU.h	/^					  Chol_Multiply, Chol_BC_Mul, Chol_Rank1_Update, Chol_End} Chol_Current_State,Chol_Next_State;$/;"	e	enum:LAPU::Chol_States
Chol_States	LAPU.h	/^	enum Chol_States {Chol_Initial, Chol_Feed_Sqrt, Chol_Inv_Sqrt, Chol_BC_InvSqrt,$/;"	g	class:LAPU
Cholesky	LAPU.cpp	/^int LAPU::Cholesky(int Global_index){$/;"	f	class:LAPU
Cin_Counter	IO.h	/^	int Cin_Counter;$/;"	m	class:IO
Cin_Counter	PE.h	/^	int Cin_Counter;$/;"	m	class:PE
Column_Buses_Read	LAPU.h	/^	double * Column_Buses_Read;$/;"	m	class:LAPU
Column_Buses_Write	LAPU.h	/^	double * Column_Buses_Write;$/;"	m	class:LAPU
Counter_Curr	LAPU.h	/^	int Counter_Curr;$/;"	m	class:LAPU
Counter_Curr	PE.h	/^	int Counter_Curr;$/;"	m	class:PE
Counter_Next	LAPU.h	/^	int Counter_Next;$/;"	m	class:LAPU
Counter_Next	PE.h	/^	int Counter_Next;$/;"	m	class:PE
Cout_Counter	IO.h	/^	int Cout_Counter;$/;"	m	class:IO
Cout_Counter	PE.h	/^	int Cout_Counter;$/;"	m	class:PE
Cycle	FMA.cpp	/^int FMA::Cycle(){$/;"	f	class:FMA
Cycle	Inv_Sqrt.cpp	/^int Inv_Sqrt::Cycle(){$/;"	f	class:Inv_Sqrt
Cycle	LAPU.cpp	/^int LAPU::Cycle(){$/;"	f	class:LAPU
Cycle	PE.cpp	/^int PE::Cycle(){$/;"	f	class:PE
Cycles_Passed	LAPU.h	/^	int Cycles_Passed;$/;"	m	class:LAPU
Done	IO.h	/^	int Done;$/;"	m	class:IO
Drive_Buses	LAPU.cpp	/^int LAPU::Drive_Buses(){$/;"	f	class:LAPU
Dump_ALU_Pipeline	PE.cpp	/^int PE::Dump_ALU_Pipeline(ALU_op operation_type){$/;"	f	class:PE
Dump_All_PE_ALUs	LAPU.cpp	/^int LAPU::Dump_All_PE_ALUs(ALU_op operation_type){$/;"	f	class:LAPU
Dump_All_PE_Registers	LAPU.cpp	/^int LAPU::Dump_All_PE_Registers(){$/;"	f	class:LAPU
Dump_Chol_SMachine	LAPU.cpp	/^int LAPU::Dump_Chol_SMachine(){$/;"	f	class:LAPU
Dump_Column_Buses	LAPU.cpp	/^int LAPU::Dump_Column_Buses(){$/;"	f	class:LAPU
Dump_Gemm_SMachine	LAPU.cpp	/^int LAPU::Dump_Gemm_SMachine(){$/;"	f	class:LAPU
Dump_Inv_Sqrt_Regs	Inv_Sqrt.cpp	/^int Inv_Sqrt::Dump_Inv_Sqrt_Regs(){$/;"	f	class:Inv_Sqrt
Dump_Matmul_SMachine	LAPU.cpp	/^int LAPU::Dump_Matmul_SMachine(){$/;"	f	class:LAPU
Dump_PE_ALU	LAPU.cpp	/^int LAPU::Dump_PE_ALU(int row, int column, ALU_op operation_type){$/;"	f	class:LAPU
Dump_PE_Mem	PE.cpp	/^void PE::Dump_PE_Mem (int amount){$/;"	f	class:PE
Dump_PE_Registers	LAPU.cpp	/^int LAPU::Dump_PE_Registers(int row, int column){$/;"	f	class:LAPU
Dump_Pipeline	FMA.cpp	/^int FMA::Dump_Pipeline( ALU_op operation_type){$/;"	f	class:FMA
Dump_Regs	PE.cpp	/^int PE::Dump_Regs(){$/;"	f	class:PE
Dump_Row_Buses	LAPU.cpp	/^int LAPU::Dump_Row_Buses(){$/;"	f	class:LAPU
Dump_Sqrt_Unit	LAPU.cpp	/^int LAPU::Dump_Sqrt_Unit(){$/;"	f	class:LAPU
Dump_Trsm_SMachine	LAPU.cpp	/^int LAPU::Dump_Trsm_SMachine(){$/;"	f	class:LAPU
Execute	Inv_Sqrt.cpp	/^int Inv_Sqrt::Execute (int Global_index, int Iter_Counter, int Latency_Counter,$/;"	f	class:Inv_Sqrt
Execute	PE.cpp	/^int PE::Execute				(int Global_index, int Trsm_index, int Iter_Counter, int Latency_Counter,$/;"	f	class:PE
Execute_Add	FMA.cpp	/^double FMA::Execute_Add(double A, double B, int add_sub){$/;"	f	class:FMA
Execute_MAC	FMA.cpp	/^double FMA::Execute_MAC(double A, double B){$/;"	f	class:FMA
Execute_MAD	FMA.cpp	/^double FMA::Execute_MAD(double A, double B, double C){$/;"	f	class:FMA
Execute_Matmul	PE.cpp	/^int PE::Execute_Matmul (int Global_index, int N, int Mc, int Kc, int Matmul_Current_State,int Latency_Counter){$/;"	f	class:PE
Execute_Mul	FMA.cpp	/^double FMA::Execute_Mul(double A, double B){$/;"	f	class:FMA
FALSE	Parameters.h	16;"	d
FMA	FMA.cpp	/^FMA::FMA()$/;"	f	class:FMA
FMA	FMA.h	/^class FMA$/;"	c
FMA_Dynamic	Parameters.h	43;"	d
FMA_H_	FMA.h	12;"	d
FMA_Latency	Parameters.h	26;"	d
FMA_Leakage	Parameters.h	44;"	d
Flush_Local_Mem	PE.cpp	/^int PE::Flush_Local_Mem( double **& Input_matrix, int row_number, int column_number, int offset){$/;"	f	class:PE
Flush_Mem	LAPU.cpp	/^int LAPU::Flush_Mem( double **& Input_matrix, int row_number, int column_number,int offset){$/;"	f	class:LAPU
Flush_Register_File	Reg_File.cpp	/^int Reg_File::Flush_Register_File ( double **& B, int row_number, int column_number,int offset){$/;"	f	class:Reg_File
Gemm_BC	LAPU.h	/^	enum Gemm_States{Gemm_Initial,Gemm_Pre_Fetch, Gemm_BC, Gemm_MAC_BC, Gemm_MAC, Gemm_End} Gemm_Current_State, Gemm_Next_State;$/;"	e	enum:LAPU::Gemm_States
Gemm_Current_State	LAPU.h	/^	enum Gemm_States{Gemm_Initial,Gemm_Pre_Fetch, Gemm_BC, Gemm_MAC_BC, Gemm_MAC, Gemm_End} Gemm_Current_State, Gemm_Next_State;$/;"	m	class:LAPU	typeref:enum:LAPU::Gemm_States
Gemm_End	LAPU.h	/^	enum Gemm_States{Gemm_Initial,Gemm_Pre_Fetch, Gemm_BC, Gemm_MAC_BC, Gemm_MAC, Gemm_End} Gemm_Current_State, Gemm_Next_State;$/;"	e	enum:LAPU::Gemm_States
Gemm_Initial	LAPU.h	/^	enum Gemm_States{Gemm_Initial,Gemm_Pre_Fetch, Gemm_BC, Gemm_MAC_BC, Gemm_MAC, Gemm_End} Gemm_Current_State, Gemm_Next_State;$/;"	e	enum:LAPU::Gemm_States
Gemm_MAC	LAPU.h	/^	enum Gemm_States{Gemm_Initial,Gemm_Pre_Fetch, Gemm_BC, Gemm_MAC_BC, Gemm_MAC, Gemm_End} Gemm_Current_State, Gemm_Next_State;$/;"	e	enum:LAPU::Gemm_States
Gemm_MAC_BC	LAPU.h	/^	enum Gemm_States{Gemm_Initial,Gemm_Pre_Fetch, Gemm_BC, Gemm_MAC_BC, Gemm_MAC, Gemm_End} Gemm_Current_State, Gemm_Next_State;$/;"	e	enum:LAPU::Gemm_States
Gemm_Next_State	LAPU.h	/^	enum Gemm_States{Gemm_Initial,Gemm_Pre_Fetch, Gemm_BC, Gemm_MAC_BC, Gemm_MAC, Gemm_End} Gemm_Current_State, Gemm_Next_State;$/;"	m	class:LAPU	typeref:enum:LAPU::Gemm_States
Gemm_Pre_Fetch	LAPU.h	/^	enum Gemm_States{Gemm_Initial,Gemm_Pre_Fetch, Gemm_BC, Gemm_MAC_BC, Gemm_MAC, Gemm_End} Gemm_Current_State, Gemm_Next_State;$/;"	e	enum:LAPU::Gemm_States
Gemm_States	LAPU.h	/^	enum Gemm_States{Gemm_Initial,Gemm_Pre_Fetch, Gemm_BC, Gemm_MAC_BC, Gemm_MAC, Gemm_End} Gemm_Current_State, Gemm_Next_State;$/;"	g	class:LAPU
Generate_Address_Signals	PE.cpp	/^int PE::Generate_Address_Signals(int Global_index, int Trsm_index, int Iter_Counter, int Latency_Counter,$/;"	f	class:PE
Global_Chol	Simulator.cpp	/^int Global_Chol (){$/;"	f
Global_Gemm	Simulator.cpp	/^int Global_Gemm( double **& A, double **& B, double **& C){$/;"	f
INV_SQRT_H_	Inv_Sqrt.h	9;"	d
IO	IO.cpp	/^IO::IO()$/;"	f	class:IO
IO	IO.cpp	/^IO::IO(double *& Row_Buses_Write,double *& Row_Buses_Read,double *& Column_Buses_Write,double *& Column_Buses_Read){$/;"	f	class:IO
IO	IO.h	/^class IO$/;"	c
IO_Execute_Matmul	IO.cpp	/^int IO::IO_Execute_Matmul (int Global_index, int N, int Mc, int Kc, int  Matmul_Current_State){$/;"	f	class:IO
IO_H_	IO.h	9;"	d
Initialize_Mem	LAPU.cpp	/^int LAPU::Initialize_Mem( double ** Input_matrix, int row_number, int column_number, int offset){$/;"	f	class:LAPU
Initialize_Register_File	Reg_File.cpp	/^int Reg_File::Initialize_Register_File (int row, int column, double ** A, int row_number, int column_number, int offset){$/;"	f	class:Reg_File
Intialize_Local_Mem	PE.cpp	/^int PE::Intialize_Local_Mem( double ** Input_matrix, int row_number, int column_number,int offset){$/;"	f	class:PE
InvSqrt_Dynamic	Parameters.h	47;"	d
InvSqrt_Latency	Parameters.h	29;"	d
Inv_Sqrt	Inv_Sqrt.cpp	/^Inv_Sqrt::Inv_Sqrt(){}$/;"	f	class:Inv_Sqrt
Inv_Sqrt	Inv_Sqrt.cpp	/^Inv_Sqrt::Inv_Sqrt(double *& Row_Buses_Write,double *& Row_Buses_Read,double *& Column_Buses_Write,double *& Column_Buses_Read)$/;"	f	class:Inv_Sqrt
Inv_Sqrt	Inv_Sqrt.h	/^class Inv_Sqrt$/;"	c
Inv_Sqrt_Execute	Inv_Sqrt.cpp	/^double Inv_Sqrt::Inv_Sqrt_Execute(double input){$/;"	f	class:Inv_Sqrt
Kc_Counter_Curr	LAPU.h	/^	int Kc_Counter_Curr;$/;"	m	class:LAPU
Kc_Counter_Next	LAPU.h	/^	int Kc_Counter_Next;$/;"	m	class:LAPU
Kernel_Size	Parameters.h	24;"	d
LAPU	LAPU.cpp	/^LAPU::LAPU()$/;"	f	class:LAPU
LAPU	LAPU.h	/^class LAPU$/;"	c
LAPU_Cholesky	Parameters.h	/^enum LAPU_Function { LAPU_Cholesky, LAPU_Trsm, LAPU_Rank_Update};$/;"	e	enum:LAPU_Function
LAPU_Function	Parameters.h	/^enum LAPU_Function { LAPU_Cholesky, LAPU_Trsm, LAPU_Rank_Update};$/;"	g
LAPU_H_	LAPU.h	10;"	d
LAPU_Power_Consumed	LAPU.h	/^	int LAPU_Power_Consumed;$/;"	m	class:LAPU
LAPU_Rank_Update	Parameters.h	/^enum LAPU_Function { LAPU_Cholesky, LAPU_Trsm, LAPU_Rank_Update};$/;"	e	enum:LAPU_Function
LAPU_Size	Parameters.h	25;"	d
LAPU_Trsm	Parameters.h	/^enum LAPU_Function { LAPU_Cholesky, LAPU_Trsm, LAPU_Rank_Update};$/;"	e	enum:LAPU_Function
Latency	Inv_Sqrt.h	/^	int Latency;  \/\/ in # of pipeline stages$/;"	m	class:Inv_Sqrt
Latency_Counter_Curr	LAPU.h	/^	int Latency_Counter_Curr;$/;"	m	class:LAPU
Latency_Counter_Next	LAPU.h	/^	int Latency_Counter_Next;$/;"	m	class:LAPU
Load_Accumulator	FMA.cpp	/^void FMA::Load_Accumulator(double data){$/;"	f	class:FMA
Local_Mem	PE.h	/^	Reg_File Local_Mem;$/;"	m	class:PE
Local_Mem_Address	PE.h	/^	int Local_Mem_Address;$/;"	m	class:PE
MAC_Pipe_Regs_Curr	FMA.h	/^	double * MAC_Pipe_Regs_Curr;$/;"	m	class:FMA
MAC_Pipe_Regs_Next	FMA.h	/^	double * MAC_Pipe_Regs_Next;$/;"	m	class:FMA
MAD_Latency	FMA.h	/^	int MAD_Latency;  \/\/ in # of pipeline stages$/;"	m	class:FMA
MAD_Pipe_Regs_Curr	FMA.h	/^	double * MAD_Pipe_Regs_Curr;$/;"	m	class:FMA
MAD_Pipe_Regs_Next	FMA.h	/^	double * MAD_Pipe_Regs_Next;$/;"	m	class:FMA
Matmul_BC	LAPU.h	/^	enum Matmul_States { Matmul_Init, Matmul_FetchB, Matmul_FetchA, Matmul_BC0, Matmul_BC, Matmul_MAC_BC, Matmul_MAC_Flush, Matmul_End} Matmul_Current_State, Matmul_Next_State;$/;"	e	enum:LAPU::Matmul_States
Matmul_BC0	LAPU.h	/^	enum Matmul_States { Matmul_Init, Matmul_FetchB, Matmul_FetchA, Matmul_BC0, Matmul_BC, Matmul_MAC_BC, Matmul_MAC_Flush, Matmul_End} Matmul_Current_State, Matmul_Next_State;$/;"	e	enum:LAPU::Matmul_States
Matmul_Current_State	LAPU.h	/^	enum Matmul_States { Matmul_Init, Matmul_FetchB, Matmul_FetchA, Matmul_BC0, Matmul_BC, Matmul_MAC_BC, Matmul_MAC_Flush, Matmul_End} Matmul_Current_State, Matmul_Next_State;$/;"	m	class:LAPU	typeref:enum:LAPU::Matmul_States
Matmul_End	LAPU.h	/^	enum Matmul_States { Matmul_Init, Matmul_FetchB, Matmul_FetchA, Matmul_BC0, Matmul_BC, Matmul_MAC_BC, Matmul_MAC_Flush, Matmul_End} Matmul_Current_State, Matmul_Next_State;$/;"	e	enum:LAPU::Matmul_States
Matmul_FetchA	LAPU.h	/^	enum Matmul_States { Matmul_Init, Matmul_FetchB, Matmul_FetchA, Matmul_BC0, Matmul_BC, Matmul_MAC_BC, Matmul_MAC_Flush, Matmul_End} Matmul_Current_State, Matmul_Next_State;$/;"	e	enum:LAPU::Matmul_States
Matmul_FetchB	LAPU.h	/^	enum Matmul_States { Matmul_Init, Matmul_FetchB, Matmul_FetchA, Matmul_BC0, Matmul_BC, Matmul_MAC_BC, Matmul_MAC_Flush, Matmul_End} Matmul_Current_State, Matmul_Next_State;$/;"	e	enum:LAPU::Matmul_States
Matmul_Init	LAPU.h	/^	enum Matmul_States { Matmul_Init, Matmul_FetchB, Matmul_FetchA, Matmul_BC0, Matmul_BC, Matmul_MAC_BC, Matmul_MAC_Flush, Matmul_End} Matmul_Current_State, Matmul_Next_State;$/;"	e	enum:LAPU::Matmul_States
Matmul_Kernel	LAPU.cpp	/^int LAPU::Matmul_Kernel(int Global_index){$/;"	f	class:LAPU
Matmul_MAC_BC	LAPU.h	/^	enum Matmul_States { Matmul_Init, Matmul_FetchB, Matmul_FetchA, Matmul_BC0, Matmul_BC, Matmul_MAC_BC, Matmul_MAC_Flush, Matmul_End} Matmul_Current_State, Matmul_Next_State;$/;"	e	enum:LAPU::Matmul_States
Matmul_MAC_Flush	LAPU.h	/^	enum Matmul_States { Matmul_Init, Matmul_FetchB, Matmul_FetchA, Matmul_BC0, Matmul_BC, Matmul_MAC_BC, Matmul_MAC_Flush, Matmul_End} Matmul_Current_State, Matmul_Next_State;$/;"	e	enum:LAPU::Matmul_States
Matmul_Next_State	LAPU.h	/^	enum Matmul_States { Matmul_Init, Matmul_FetchB, Matmul_FetchA, Matmul_BC0, Matmul_BC, Matmul_MAC_BC, Matmul_MAC_Flush, Matmul_End} Matmul_Current_State, Matmul_Next_State;$/;"	m	class:LAPU	typeref:enum:LAPU::Matmul_States
Matmul_States	LAPU.h	/^	enum Matmul_States { Matmul_Init, Matmul_FetchB, Matmul_FetchA, Matmul_BC0, Matmul_BC, Matmul_MAC_BC, Matmul_MAC_Flush, Matmul_End} Matmul_Current_State, Matmul_Next_State;$/;"	g	class:LAPU
Matrix_A	IO.h	/^	double ** Matrix_A;$/;"	m	class:IO
Matrix_A	LAPU.h	/^	double ** Matrix_A;$/;"	m	class:LAPU
Matrix_B	IO.h	/^	double ** Matrix_B;$/;"	m	class:IO
Matrix_B	LAPU.h	/^	double ** Matrix_B;$/;"	m	class:LAPU
Matrix_C	IO.h	/^	double ** Matrix_C;$/;"	m	class:IO
Matrix_C	LAPU.h	/^	double ** Matrix_C;$/;"	m	class:LAPU
Mc_Counter_Curr	LAPU.h	/^	int Mc_Counter_Curr;$/;"	m	class:LAPU
Mc_Counter_Next	LAPU.h	/^	int Mc_Counter_Next;$/;"	m	class:LAPU
Mem_IF	LAPU.h	/^	IO * Mem_IF;$/;"	m	class:LAPU
Mem_Size	Parameters.h	34;"	d
Memory_BW	Parameters.h	39;"	d
Mul_Latency	FMA.h	/^	int Mul_Latency;$/;"	m	class:FMA
Mul_Pipe_Regs_Curr	FMA.h	/^	double * Mul_Pipe_Regs_Curr;$/;"	m	class:FMA
Mul_Pipe_Regs_Next	FMA.h	/^	double * Mul_Pipe_Regs_Next;$/;"	m	class:FMA
Multiplication_Latency	Parameters.h	27;"	d
My_Column	PE.h	/^	int My_Row, My_Column;$/;"	m	class:PE
My_Row	PE.h	/^	int My_Row, My_Column;$/;"	m	class:PE
N_Counter_Curr	LAPU.h	/^	int N_Counter_Curr;$/;"	m	class:LAPU
N_Counter_Next	LAPU.h	/^	int N_Counter_Next;$/;"	m	class:LAPU
PARAMETERS_H_	Parameters.h	10;"	d
PE	PE.cpp	/^PE::PE()$/;"	f	class:PE
PE	PE.cpp	/^PE::PE(int row, int col,  double * row_write_bus, double * row_read_bus, double * col_write_bus, double * col_read_bus)$/;"	f	class:PE
PE	PE.h	/^class PE$/;"	c
PE_Array	LAPU.h	/^	PE  ** PE_Array;$/;"	m	class:LAPU
PE_H_	PE.h	9;"	d
Panel_Size	Parameters.h	23;"	d
Pipe_Regs_Curr	Inv_Sqrt.h	/^	double * Pipe_Regs_Curr;$/;"	m	class:Inv_Sqrt
Pipe_Regs_Next	Inv_Sqrt.h	/^	double * Pipe_Regs_Next;$/;"	m	class:Inv_Sqrt
Power_Consumed	FMA.h	/^	int Power_Consumed;$/;"	m	class:FMA
Print_BLAS	Parameters.h	21;"	d
Print_Input_Output	Parameters.h	19;"	d
Print_State_Machines	Parameters.h	20;"	d
REG_FILE_H_	Reg_File.h	9;"	d
Rank_D_Update	LAPU.cpp	/^int LAPU::Rank_D_Update(int Global_index, int Trsm_index){$/;"	f	class:LAPU
Read_Col_Buses	IO.h	/^	double * Read_Col_Buses , * Read_Row_Buses;$/;"	m	class:IO
Read_Col_Buses	Inv_Sqrt.h	/^	double * Read_Col_Buses , * Read_Row_Buses;$/;"	m	class:Inv_Sqrt
Read_My_Col_Bus	PE.h	/^	double * Read_My_Col_Bus , * Read_My_Row_Bus;$/;"	m	class:PE
Read_My_Row_Bus	PE.h	/^	double * Read_My_Col_Bus , * Read_My_Row_Bus;$/;"	m	class:PE
Read_Row_Buses	IO.h	/^	double * Read_Col_Buses , * Read_Row_Buses;$/;"	m	class:IO
Read_Row_Buses	Inv_Sqrt.h	/^	double * Read_Col_Buses , * Read_Row_Buses;$/;"	m	class:Inv_Sqrt
Reg_File	Reg_File.cpp	/^Reg_File::Reg_File()$/;"	f	class:Reg_File
Reg_File	Reg_File.h	/^class Reg_File$/;"	c
Reg_Read	Reg_File.cpp	/^double Reg_File::Reg_Read(int address){$/;"	f	class:Reg_File
Reg_Write	Reg_File.cpp	/^int Reg_File::Reg_Write(int address, double data){$/;"	f	class:Reg_File
Registers	Reg_File.h	/^	double * Registers;$/;"	m	class:Reg_File
Return_ACC	FMA.cpp	/^double FMA::Return_ACC(){$/;"	f	class:FMA
Return_Cycle_Count	LAPU.cpp	/^int LAPU::Return_Cycle_Count(){$/;"	f	class:LAPU
Return_FMA_Power_Consumed	FMA.cpp	/^int FMA::Return_FMA_Power_Consumed(){$/;"	f	class:FMA
Return_LAPU_Power	LAPU.cpp	/^int LAPU::Return_LAPU_Power(){$/;"	f	class:LAPU
Return_PE_Power	PE.cpp	/^int PE::Return_PE_Power(){$/;"	f	class:PE
Row_Buses_Read	LAPU.h	/^	double * Row_Buses_Read;$/;"	m	class:LAPU
Row_Buses_Write	LAPU.h	/^	double * Row_Buses_Write;$/;"	m	class:LAPU
Scratch_Regs_Curr	PE.h	/^	double * Scratch_Regs_Curr;$/;"	m	class:PE
Scratch_Regs_Next	PE.h	/^	double * Scratch_Regs_Next;$/;"	m	class:PE
Scratch_Size	Parameters.h	37;"	d
Size	LAPU.h	/^	int Size;$/;"	m	class:LAPU
Size	Reg_File.h	/^	int Size;$/;"	m	class:Reg_File
Sqrt_Unit	LAPU.h	/^	Inv_Sqrt * Sqrt_Unit;$/;"	m	class:LAPU
State_Start	LAPU.h	/^	bool State_Start;$/;"	m	class:LAPU
TRUE	Parameters.h	17;"	d
Trsm	LAPU.cpp	/^int LAPU::Trsm(int Global_index, int Trsm_index){$/;"	f	class:LAPU
Trsm_BC_InvSqrt	LAPU.h	/^	enum Trsm_States{Trsm_Initial, Trsm_BC_InvSqrt, Trsm_Multiply, Trsm_BC_Mult, Trsm_Partial_Rank_1,Trsm_Trans, Trsm_End} Trsm_Current_State, Trsm_Next_State;$/;"	e	enum:LAPU::Trsm_States
Trsm_BC_Mult	LAPU.h	/^	enum Trsm_States{Trsm_Initial, Trsm_BC_InvSqrt, Trsm_Multiply, Trsm_BC_Mult, Trsm_Partial_Rank_1,Trsm_Trans, Trsm_End} Trsm_Current_State, Trsm_Next_State;$/;"	e	enum:LAPU::Trsm_States
Trsm_Current_State	LAPU.h	/^	enum Trsm_States{Trsm_Initial, Trsm_BC_InvSqrt, Trsm_Multiply, Trsm_BC_Mult, Trsm_Partial_Rank_1,Trsm_Trans, Trsm_End} Trsm_Current_State, Trsm_Next_State;$/;"	m	class:LAPU	typeref:enum:LAPU::Trsm_States
Trsm_End	LAPU.h	/^	enum Trsm_States{Trsm_Initial, Trsm_BC_InvSqrt, Trsm_Multiply, Trsm_BC_Mult, Trsm_Partial_Rank_1,Trsm_Trans, Trsm_End} Trsm_Current_State, Trsm_Next_State;$/;"	e	enum:LAPU::Trsm_States
Trsm_Initial	LAPU.h	/^	enum Trsm_States{Trsm_Initial, Trsm_BC_InvSqrt, Trsm_Multiply, Trsm_BC_Mult, Trsm_Partial_Rank_1,Trsm_Trans, Trsm_End} Trsm_Current_State, Trsm_Next_State;$/;"	e	enum:LAPU::Trsm_States
Trsm_Multiply	LAPU.h	/^	enum Trsm_States{Trsm_Initial, Trsm_BC_InvSqrt, Trsm_Multiply, Trsm_BC_Mult, Trsm_Partial_Rank_1,Trsm_Trans, Trsm_End} Trsm_Current_State, Trsm_Next_State;$/;"	e	enum:LAPU::Trsm_States
Trsm_Next_State	LAPU.h	/^	enum Trsm_States{Trsm_Initial, Trsm_BC_InvSqrt, Trsm_Multiply, Trsm_BC_Mult, Trsm_Partial_Rank_1,Trsm_Trans, Trsm_End} Trsm_Current_State, Trsm_Next_State;$/;"	m	class:LAPU	typeref:enum:LAPU::Trsm_States
Trsm_Partial_Rank_1	LAPU.h	/^	enum Trsm_States{Trsm_Initial, Trsm_BC_InvSqrt, Trsm_Multiply, Trsm_BC_Mult, Trsm_Partial_Rank_1,Trsm_Trans, Trsm_End} Trsm_Current_State, Trsm_Next_State;$/;"	e	enum:LAPU::Trsm_States
Trsm_States	LAPU.h	/^	enum Trsm_States{Trsm_Initial, Trsm_BC_InvSqrt, Trsm_Multiply, Trsm_BC_Mult, Trsm_Partial_Rank_1,Trsm_Trans, Trsm_End} Trsm_Current_State, Trsm_Next_State;$/;"	g	class:LAPU
Trsm_Trans	LAPU.h	/^	enum Trsm_States{Trsm_Initial, Trsm_BC_InvSqrt, Trsm_Multiply, Trsm_BC_Mult, Trsm_Partial_Rank_1,Trsm_Trans, Trsm_End} Trsm_Current_State, Trsm_Next_State;$/;"	e	enum:LAPU::Trsm_States
Write_Col_Buses	IO.h	/^	double * Write_Col_Buses, * Write_Row_Buses;$/;"	m	class:IO
Write_Col_Buses	Inv_Sqrt.h	/^	double * Write_Col_Buses, * Write_Row_Buses;$/;"	m	class:Inv_Sqrt
Write_My_Col_Bus	PE.h	/^	double * Write_My_Col_Bus, * Write_My_Row_Bus;$/;"	m	class:PE
Write_My_Col_Reg_Curr	PE.h	/^	double Write_My_Col_Reg_Curr, Write_My_Row_Reg_Curr;$/;"	m	class:PE
Write_My_Col_Reg_Next	PE.h	/^	double Write_My_Col_Reg_Next, Write_My_Row_Reg_Next;$/;"	m	class:PE
Write_My_Row_Bus	PE.h	/^	double * Write_My_Col_Bus, * Write_My_Row_Bus;$/;"	m	class:PE
Write_My_Row_Reg_Curr	PE.h	/^	double Write_My_Col_Reg_Curr, Write_My_Row_Reg_Curr;$/;"	m	class:PE
Write_My_Row_Reg_Next	PE.h	/^	double Write_My_Col_Reg_Next, Write_My_Row_Reg_Next;$/;"	m	class:PE
Write_Row_Buses	IO.h	/^	double * Write_Col_Buses, * Write_Row_Buses;$/;"	m	class:IO
Write_Row_Buses	Inv_Sqrt.h	/^	double * Write_Col_Buses, * Write_Row_Buses;$/;"	m	class:Inv_Sqrt
data_transfer_total	IO.h	/^	int data_transfer_total;$/;"	m	class:IO
i	LAPU.h	/^	int i,j;$/;"	m	class:LAPU
initialize_Chol_Matrix	Simulator.cpp	/^int initialize_Chol_Matrix(int size, double **& matrix_A){$/;"	f
j	LAPU.h	/^	int i,j;$/;"	m	class:LAPU
main	Simulator.cpp	/^int main() {$/;"	f
make_test_matrix	Simulator.cpp	/^int make_test_matrix(int rows, int columns, double **& test_matrix, int preset, char type){$/;"	f
my_column	Reg_File.h	/^	int my_column;$/;"	m	class:Reg_File
my_row	Reg_File.h	/^	int my_row;$/;"	m	class:Reg_File
print_matrix	Simulator.cpp	/^int print_matrix(int rows, int columns, double ** matrix_A){$/;"	f
~FMA	FMA.cpp	/^FMA::~FMA(){$/;"	f	class:FMA
~IO	IO.cpp	/^IO::~IO()$/;"	f	class:IO
~Inv_Sqrt	Inv_Sqrt.cpp	/^Inv_Sqrt::~Inv_Sqrt()$/;"	f	class:Inv_Sqrt
~LAPU	LAPU.cpp	/^LAPU::~LAPU()$/;"	f	class:LAPU
~PE	PE.cpp	/^PE::~PE()$/;"	f	class:PE
~Reg_File	Reg_File.cpp	/^Reg_File::~Reg_File()$/;"	f	class:Reg_File
